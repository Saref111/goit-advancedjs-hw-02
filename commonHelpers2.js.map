{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport iziToast from \"izitoast\";\n\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst input = document.querySelector('#datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst daysFiled = document.querySelector('[data-days]');\nconst hoursFiled = document.querySelector('[data-hours]');\nconst minutesFiled = document.querySelector('[data-minutes]');\nconst secondsFiled = document.querySelector('[data-seconds]');\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {        \n        if (selectedDates[0] < new Date()) {\n            iziToast.error({\n                title: 'Error',\n                message: 'Please choose a date in the future',\n            });\n            startButton.disabled = true;\n        } else {\n            startButton.disabled = false;\n        }\n    },\n};\n\nflatpickr(input, options);\n\nfunction onStartButtonClick() {\n    startButton.disabled = true;\n    const selectedDate = new Date(input.value);\n    const currentDate = Date.now();\n    const time = selectedDate - currentDate;\n    const timeLeft = getTimeComponents(time);\n    updateClockface(timeLeft);\n    startTimer(time);\n}\n\nfunction startTimer(time) {\n    const timerId = setInterval(() => {\n        const timeLeft = getTimeComponents(time);\n        updateClockface(timeLeft);\n        time -= 1000;\n        if (time < 0) {\n            clearInterval(timerId);\n        }\n    }, 1000);\n}\n\nfunction getTimeComponents(time) {\n    return [\n        Math.floor(time / (1000 * 60 * 60 * 24)),\n        Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n        Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)),\n        Math.floor((time % (1000 * 60)) / 1000),\n    ];\n}\n\nfunction updateClockface([days, hours, minutes, seconds]) {\n    daysFiled.textContent = days;\n    hoursFiled.textContent = hours;\n    minutesFiled.textContent = minutes;\n    secondsFiled.textContent = seconds;\n}\n\nstartButton.addEventListener('click', onStartButtonClick);\n\n\n"],"names":["input","startButton","daysFiled","hoursFiled","minutesFiled","secondsFiled","options","selectedDates","iziToast","flatpickr","onStartButtonClick","selectedDate","currentDate","time","timeLeft","getTimeComponents","updateClockface","startTimer","timerId","days","hours","minutes","seconds"],"mappings":"+IAKA,MAAMA,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAEtDC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACfA,EAAc,GAAK,IAAI,MACvBC,EAAS,MAAM,CACX,MAAO,QACP,QAAS,oCACzB,CAAa,EACDP,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE9B,CACL,EAEAQ,EAAUT,EAAOM,CAAO,EAExB,SAASI,GAAqB,CAC1BT,EAAY,SAAW,GACvB,MAAMU,EAAe,IAAI,KAAKX,EAAM,KAAK,EACnCY,EAAc,KAAK,MACnBC,EAAOF,EAAeC,EACtBE,EAAWC,EAAkBF,CAAI,EACvCG,EAAgBF,CAAQ,EACxBG,EAAWJ,CAAI,CACnB,CAEA,SAASI,EAAWJ,EAAM,CACtB,MAAMK,EAAU,YAAY,IAAM,CAC9B,MAAMJ,EAAWC,EAAkBF,CAAI,EACvCG,EAAgBF,CAAQ,EACxBD,GAAQ,IACJA,EAAO,GACP,cAAcK,CAAO,CAE5B,EAAE,GAAI,CACX,CAEA,SAASH,EAAkBF,EAAM,CAC7B,MAAO,CACH,KAAK,MAAMA,GAAQ,IAAO,GAAK,GAAK,GAAG,EACvC,KAAK,MAAOA,GAAQ,IAAO,GAAK,GAAK,KAAQ,IAAO,GAAK,GAAG,EAC5D,KAAK,MAAOA,GAAQ,IAAO,GAAK,KAAQ,IAAO,GAAG,EAClD,KAAK,MAAOA,GAAQ,IAAO,IAAO,GAAI,CAC9C,CACA,CAEA,SAASG,EAAgB,CAACG,EAAMC,EAAOC,EAASC,CAAO,EAAG,CACtDpB,EAAU,YAAciB,EACxBhB,EAAW,YAAciB,EACzBhB,EAAa,YAAciB,EAC3BhB,EAAa,YAAciB,CAC/B,CAEArB,EAAY,iBAAiB,QAASS,CAAkB"}